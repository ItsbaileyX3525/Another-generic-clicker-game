set_orientation('horizontal')
print("Hello world")
set_window_color('rgb(23,23,23)')
ASSETS_FOLDER = '/assets/'

startScreenElements = []
infoScreenElements = []
mainGameElements = []
generatorElements = []
activeUpgrades = []
storedUpgrades = []
achievementElements = []
achievements = []
powerups = []

######## Main menu stuff ############

def loadScreen(name): #Debuggin
    for e in startScreenElements:
        e.enabled = false
    if name == "info":
        for e in infoScreenElements:
            e.enabled = true
    if name == "game":
        for e in startScreenElements:
            e.enabled = false
        after .01:
            for e in mainGameElements:
                e.enabled = true
                backgroundMusic.play()
        
        activeUpgrades = []
        storedUpgrades = []
        
        for ([key, value] of Object.entries(game.upgrades)) {

                if not value[1]:
                    addUpgrade(key, value[2], value[0])        
        
        loadUpgrades()
        loadGenerators()

    if name == "achievements":
        for e in achievementElements:
            e.enabled = true
        loadAchievementDisplay()

gameTitle = Text(text = 'Another generic clicker game',y=.4, text_color = color.white)
gameTitle.fit_to_text()
gameStart = Button(text = 'START GAME', text_color=color.white, color=color.black, scale_y=.2,scale_x = .5)
gameStart.on_click = def():
    gameStart.animate('scale_x', .4, duration=.03)
    gameStart.animate('scale_y', .18, duration=.03)
    after .2:
        gameStart.animate('scale_x', .5, duration=.05)
        gameStart.animate('scale_y', .2, duration=.05)
        for e in startScreenElements:
            e.enabled = false
        after .01:
            for e in mainGameElements:
                e.enabled = true
                backgroundMusic.play()
        
        activeUpgrades = []
        storedUpgrades = []
        
        for ([key, value] of Object.entries(game.upgrades)) {

                if not value[1]:
                    addUpgrade(key, value[2], value[0])        
        
        loadUpgrades()
        loadGenerators()

warningText = Text(enabled=false,text_size=1.8,y=.3,x=.084,text='Your save is outdated and may cause errors, it is\nrecommended that you erase your save to continue playing.', text_color=color.red)
warningText.fit_to_text()

erasedText = Text(enabled=false,text='Data erased successfully!',y=.3, text_color=color.red)
erasedText.fit_to_text()

if localStorage.getItem('erased') == 'true':
    localStorage.setItem('erased', 'false')
    erasedText.enabled = true

eraseData = Button(text='Erase save',padding=.3,text_size=2.5,y=-.22)
eraseData.fit_to_text()
eraseData.on_click = def():
    localStorage.clear()
    localStorage.setItem('erased', 'true')
    window.location.reload()

infoButton = Button(text = 'What game engine is this?',padding=1, scale_x = .4, scale_y = .1, text_size = 1.6, y=-.4, text_color = color.light_gray, color=color.dark_gray)
infoButton.fit_to_text()
infoButton.on_click = def():
    for e in startScreenElements:
        e.enabled = false 
    for e in infoScreenElements:
        e.enabled = true

infoScreenBG = Entity(color=color.light_gray, scale_x=2, scale_y=2, enabled = false)
infoText = Text(y=.3,x=0,text = 'The game engine is called taptapir, it is a game engine that was created by <a style="color: salmon;" target="_blank" href="https://github.com/pokepetter/">Pokepetter</a>\nPokepetter created the taptapir engine as a method for building mobile games in a way\nthat felt like you were still using ursina\n\nFor that reason I fell in love with taptapir and used it in my early development life as I\ndidn\'t know any other methods to build for mobile at the time (I was a new dev)\nso thank you Poke for creating taptapir', enabled = false, text_size=2, enabled = false)
infoText.fit_to_text()
infoReturn = Button(text = 'RETURN', scale_x=.5, scale_y=.15, y=-.19, enabled = false)
infoReturn.on_click = def():
    for e in startScreenElements:
        e.enabled = true
    for e in infoScreenElements:
        e.enabled = false

startScreenElements.append(gameTitle)
startScreenElements.append(gameStart)
startScreenElements.append(infoButton)
startScreenElements.append(eraseData)
startScreenElements.append(erasedText)

infoScreenElements.append(infoText)
infoScreenElements.append(infoScreenBG)
infoScreenElements.append(infoReturn)


########## Clicker game stuff ###########

globalClickerMultiplier = 1;
powerupClickMultiplier = 1;

def showOfflineEarning(amount):
    offlineEarnScreen.enabled = true
    offlineText2.fit_to_text()
    offlineText2.text = 'While you\'ve been away, you have earnt\n\n\n<center>' + formatNumber(amount) + ' Clicks!</center>'

def clicks10():
    game.upgrades["scoreDisplay"] = [10, false, "See how much clicks you have"]
    addUpgrade("scoreDisplay", game.upgrades["scoreDisplay"][2], game.upgrades["scoreDisplay"][0])

def clicks50():
    game.upgrades["clickAnim"] = [50, false, "Add a cool click animation"]
    addUpgrade("clickAnim", game.upgrades["clickAnim"][2], game.upgrades["clickAnim"][0])

def clicks100():
    game.upgrades["clickEffects"] = [199, false, "Make some particles appear!"]
    addUpgrade("clickEffects", game.upgrades["clickEffects"][2], game.upgrades["clickEffects"][0])
          
def clicks225():
    game.upgrades["clickCrit"] = [425, false, "Unlock critical clicks!"]
    addUpgrade("clickCrit", game.upgrades["clickCrit"][2], game.upgrades["clickCrit"][0])

def clicks350():
    game.upgrades["autoClicker"] = [900, false, "Be lazy, auto click!"]
    addUpgrade("autoClicker", game.upgrades["autoClicker"][2], game.upgrades["autoClicker"][0])

def clicks500():
    game.upgrades["comboBar"] = [2000, false, "Click faster, get better combos!"]
    addUpgrade("comboBar", game.upgrades["comboBar"][2], game.upgrades["comboBar"][0])

def clicks1250():
    game.upgrades["clickPower"] = [4500, false, "Increase your click power tenfold!"]
    addUpgrade("clickPower", game.upgrades["clickPower"][2], game.upgrades["clickPower"][0])
    prevClickAmount = 20

def score150():
    game.upgrades["generators"] = [250, false, "Unlock some automation"]
    addUpgrade("generators", game.upgrades["generators"][2], game.upgrades["generators"][0])

def score500():
    game.upgrades["save"] = [750, false, "Save your game whenever\nyou want!"]
    addUpgrade("save", game.upgrades["save"][2], game.upgrades["save"][0])

def score800():
    game.upgrades["background"] = [1000, false, "Add a nice background to\nthe game"]
    addUpgrade("background", game.upgrades["background"][2], game.upgrades["background"][0])

def score1200():
    game.upgrades["removeBackground"] = [1500, false, "Create a button to turn\noff the background!"]
    addUpgrade("removeBackground", game.upgrades["removeBackground"][2], game.upgrades["removeBackground"][0])

def score2300():
    game.upgrades["powerUps"] = [3100, false, "Spawn powerups for cool boosts!"]
    addUpgrade("powerUps", game.upgrades["powerUps"][2], game.upgrades["powerUps"][0])

def score3500():
    game.upgrades["achievementsButton"] = [4500, false, "See all your cool achievements!"]
    addUpgrade("achievementsButton", game.upgrades["achievementsButton"][2], game.upgrades["achievementsButton"][0])


def loadUpgrades():
    if game.upgrades["scoreDisplay"] and game.upgrades["scoreDisplay"][1]:
        scoreText.enabled = true
        mainGameElements.append(scoreText)
    if game.upgrades["save"] and game.upgrades["save"][1]:
        saveGameButton.enabled = true
        mainGameElements.append(saveGameButton)
    if game.upgrades["generators"] and game.upgrades["generators"][1]:
        generatorButton.enabled = true
        mainGameElements.append(generatorButton)
    if game.upgrades['background'] and game.upgrades['background'][1]:
        if localStorage.getItem('backgroundEnabled') === 'true' or localStorage.getItem('backgroundEnabled') === null:
            background.enabled = true
        localStorage.setItem('backgroundEnabled', 'true')
        mainGameElements.append(background)
    if game.upgrades['removeBackground'] and game.upgrades['removeBackground'][1]:
        backgroundToggle.enabled = true
        if localStorage.getItem('backgroundEnabled') === 'true' or localStorage.getItem('backgroundEnabled') === null:
            backgroundToggle.texture = 'bgEnabled.svg'
        else:
            backgroundToggle.texture = 'bgDisabled.svg'
        backgroundToggle.color = color.gray
        mainGameElements.append(backgroundToggle)
    if game.upgrades['autoClicker'] and game.upgrades['autoClicker'][1]:
        autoClicker.enabled = true
    if game.upgrades["achievementsButton"] and game.upgrades["achievementsButton"][1]:
        achievementButton.enabled = true
        mainGameElements.append(achievementButton)
    if game.upgrades["comboBar"] and game.upgrades["comboBar"][1]:
        comboBar.enabled = true
        comboBarText.enabled = true
        mainGameElements.append(comboBar)
        mainGameElements.append(comboBarText)
        comboBeat()
    if game.upgrades["powerUps"] and game.upgrades["powerUps"][1]:
        after randomInt(4,10):
            createPowerup()

def addUpgrade(upgrade, description, cost, skipDuplicateCheck = false):
    if not skipDuplicateCheck:
        for activeUpg in activeUpgrades:
            if activeUpg.text == upgrade:
                return
        
        for storedUpg in storedUpgrades:
            if storedUpg[0] == upgrade:
                return
    
    if activeUpgrades.length >= 1:
        upgradeData = [upgrade, description, cost]
        storedUpgrades.append(upgradeData)
        nextUpgrade.enabled = true
        return
    
    for e in activeUpgrades:
        e.x-=.13 
    b = Button(parent=upgradeHolder,text=upgrade,name="upgradeButton",price=cost, text_size=1.3, color=color.black, text_color=color.white, scale=.125,y=-.11,x=0,desc=description)
    b.on_click = def():
        game.purchaseUpgrade(upgrade, b)
    addHover(b.el,description,cost)
    activeUpgrades.append(b)
    
    if storedUpgrades.length > 0:
        nextUpgrade.enabled = true
    else:
        nextUpgrade.enabled = false

mouseTooltip = Text(enabled = false, text_color=color.white,text = 'description of what\nthe button does\n<center>Cost: 50</center>', text_size=2, color=color.black)
mouseTooltip.fit_to_text()
mouseTooltip.update = def():
    mouseTooltip.x = mouse.x +.25
    mouseTooltip.y = mouse.y +.08
    mouseTooltip.fit_to_text()

def createSaveText():
    saveT = Text(name='test',text='Game saved successfully', text_color=color.green,y=-.44,x=.02)
    saveT.fit_to_text()
    saveT.animate("y", -.32, duartion=.4)

    after .6:
        destroy(saveT)


saveGameButton = Button(texture = 'save.svg', y=.3, scale = .12, color=color.gray, y=.43,x=.8, enabled=false)
saveGameButton.on_click = def():
    if not saveGameButton.disabled:
        saveGameButton.disabled = true
        game.saveGame()
        saveGameSFX.currentTime = 0
        saveGameSFX.play()
        after .6:
            saveGameButton.disabled = false
        
        createSaveText()

scoreText = Text(text = 'Clicks: 0', text_color=color.light_gray, y=.43, enabled=false)
scoreText.fit_to_text()
scoreText.update = def():
    scoreText.text = 'Clicks: ' + formatNumber(game.score)

minParticleX = .2
maxParticleX = .5

def destroyParticle(particle):
    after 1:
        destroy(particle)

def showParticle(amount, isCrit):
    colorShown = color.yellow
    if isCrit:
        colorShown = color.orange
    xPos = Math.random() * (maxParticleX - minParticleX) + minParticleX
    particle = Text(text = '+' + String(amount), text_color=colorShown,y=-.25,x=xPos)
    particle.animate('y', -.1, duration = 2, curve=curves.out_expo)
    destroyParticle(particle)

cpsCounter = 0
def cps():
    cpsCounter += 1
    after 1:
        cpsCounter -= 1

def decrease_bar():
    comboBar.value -= .05 * (globalClickerMultiplier - .5)

def increase_bar():
    comboBar.value += 1

prevClickAmount = parseInt(localStorage.getItem('clickAmount'), 10) || 0

clickToEarn = Button(y=.07,enabled = false)  
clickToEarn.on_click = def():
    clickSound()
    cps()
    increase_bar()
    clicksHave += 1
    randChance = 0
    multiplier = 1
    amount = 0
    isCrit = false
    if Object.hasOwn(game.upgrades, "clickCrit") and game.upgrades["clickCrit"][1]:
        randChance = Math.floor(Math.random() * 15) + 1
        if randChance == 15:
            multiplier = 4
            isCrit = true
    if Object.hasOwn(game.upgrades, "clickAnim") and game.upgrades["clickAnim"][1]:
        clickToEarn.scale=.22
        clickToEarn.animate('scale_x', .2, duration=.1)
        clickToEarn.animate('scale_y', .2, duration=.1)
        if Object.hasOwn(game.upgrades, "clickPower") and game.upgrades["clickPower"][1]:
            localStorage.setItem('clickAmount', 20)
            prevClickAmount = 20
            amount = 20 * multiplier * powerupClickMultiplier * globalClickerMultiplier
            game.score += amount
        else:
            localStorage.setItem('clickAmount', 2)
            prevClickAmount = 2
            amount = 2 * multiplier * powerupClickMultiplier * globalClickerMultiplier
            game.score += amount
    else:
        localStorage.setItem('clickAmount', 1)
        prevClickAmount = 1
        amount = 1 * multiplier * powerupClickMultiplier * globalClickerMultiplier
        game.score += amount

    
    game.clicks += 1

    if Object.hasOwn(game.upgrades, "clickEffects") and game.upgrades["clickEffects"][1]:
        showParticle(amount, isCrit)

achievementButton = Button(enabled=false,texture='trophy.svg',color=color.gray, scale=.11, y=.43,x=.65)
achievementButton.on_click = def():
    for e in mainGameElements:
        e.enabled = false
    for e in achievementElements:
        e.enabled = true
    for e in powerups:
        destroy(e)

    autoClicker.alpha = 0
    loadAchievementDisplay()

beatTimer = 1.5
beating = false

def comboBeat():
    if not beating:
        after .2:
            comboBeat()
        return
    print(beatTimer)
    if beatTimer < .5:
        print("Fast")
        comboBarText.animate('text_size', 3.3, duration=.1)
        comboBarText.animate('text_size', 3.3, duration=.1)
        backgroundMusic.playbackRate = 1.3
    elif beatTimer < .8:
        print("Medium")
        comboBarText.animate('text_size', 3.3, duration=.1)
        comboBarText.animate('text_size', 3.3, duration=.1)
        backgroundMusic.playbackRate = 1.2
    else:
        print("Slowest")
        comboBarText.animate('text_size', 3.1, duration=.1)
        comboBarText.animate('text_size', 3.1, duration=.1)
        backgroundMusic.playbackRate = 1.1 
    after .1:
        comboBarText.animate('text_size', 3, duration=beatTimer)
        comboBarText.animate('text_size', 3, duration=beatTimer)
        after beatTimer:
            comboBeat()

comboBarText = Text(enabled=false,text='1x',text_color=color.light_gray,color=color.black,text_size=3,padding=.2,roundness=.02,y=-.23)
comboBarText.fit_to_text()
comboBar = HealthBar(enabled=false,bar_color=color.orange,roundness=.2,parent=camera.ui,text_size=0, scale=[.5,.04],y=-.3)
comboBar.value = 0

lastTimeCombo = getPerformance();
clicksNeededToIncrease = 25
clicksHave = 0

comboInterval = 1.0 / 60
comboTimer = 0

comboDelta = 0
combo = Entity(scale=0,y=999)
combo.update = def():
    if comboBar.enabled:
        if clicksHave >= clicksNeededToIncrease:
            clicksNeededToIncrease *= 1.18
            globalClickerMultiplier += 1
            clicksHave = 0
            comboBarText.text = String(globalClickerMultiplier) + "x"
            if beatTimer > .4:
                beatTimer -= .3

        if comboBar.value <= 0:
            beating = false
            globalClickerMultiplier = 1
            beatTimer = 1.5
            clicksNeededToIncrease = 25
            clicksHave = 0
            backgroundMusic.playbackRate = 1
            comboBarText.text = String(globalClickerMultiplier) + "x"

        else:
            beating = true

        if comboBar.enabled:
            comboDelta = getDeltaCombo()

            comboTimer += comboDelta
            if comboTimer >= comboInterval:
                decrease_bar()
                comboTimer = 0
    else:
        print("Disabled")
        beating = false
        globalClickerMultiplier = 1
        beatTimer = 1.5
        clicksNeededToIncrease = 25
        clicksHave = 0
        backgroundMusic.playbackRate = 1
        comboBarText.text = String(globalClickerMultiplier) + "x"


offlineEarnScreen = Entity(enabled=false,color=color.gray,parent=camera.ui,scale=[1.1,.9],z=-999,roundness=.1)
offlineText = Text(parent=offlineEarnScreen,y=.45, text='Welcome back!')
offlineText.fit_to_text()
offlineText2 = Text(parent=offlineEarnScreen,y=.18,text='While you\'ve been away, you have earnt\n\n\n<center>51.32M Clicks!</center>')
offlineText2.fit_to_text()
offlineCollect = Button(parent=offlineEarnScreen,padding=.4,y=-.15, text='COLLECT', color=color.green)
offlineCollect.fit_to_text()
offlineCollect.on_click = def():
    offlineEarnScreen.enabled = false
    game.collectOffline()

#Shocking how hard this was to make
autoClickerMaxX = -.146
autoClickerMinX =  -.19
autoClickInterval = 1.0 / 3.5
autoClickTimer = 0

lastTime = getPerformance();

def click():
    autoClicker.animate("x", autoClickerMaxX, duration = autoClickInterval/2, curve=curves.in_out_expo)
    multiplier = 1
    isCrit = false
    if Object.hasOwn(game.upgrades, "clickCrit") and game.upgrades["clickCrit"][1]:
        randChance = Math.floor(Math.random() * 15) + 1
        if randChance == 15:
            multiplier = 4
            isCrit = true
    after autoClickInterval/2:
        amount = prevClickAmount * multiplier
        if autoClicker.alpha == "1":
            clickSound(.1)
            if Object.hasOwn(game.upgrades, "clickEffects") and game.upgrades["clickEffects"][1]:
                showParticle(amount, isCrit)
        game.clicks += .2
        if prevClickAmount === 0:
            prevClickAmount = 1
        
        game.score += amount


        autoClicker.animate("x", autoClickerMinX, duration = autoClickInterval/2, curve=curves.in_out_expo)

autoClicker = Entity(enabled=false,parent=camera.ui,texture='cursorClick.svg',scale=.1, x=-.19,y=.05,rotation=90)
autoClickDelta = 0
autoClicker.update = def():

    if autoClicker.enabled:
        autoClickDelta = getDelta()

        autoClickTimer += autoClickDelta
        if autoClickTimer >= autoClickInterval:
            click()
            autoClickTimer = 0

clickPowerup = false
genSpeedPowerup = false

def associateClick(button, type):
    powerups.append(button)
    if type == "click":
        button.on_click = def():
            if clickPowerup:
                destroy(button)
                powerups = powerups.filter(item => item !== button);
                return
            console.log("Clicked, increase click power")
            powerupClickMultiplier = 1.75;
            clickPowerup = true
            after 7:
                powerupClickMultiplier = 1
                clickPowerup = false
            destroy(button)
            powerups = powerups.filter(item => item !== button);
    elif type == 'gens':

        button.on_click = def():
            if genSpeedPowerup:
                destroy(button)
                powerups = powerups.filter(item => item !== button);
                return
            console.log("Clicked, decrease generator time")
            window.setGenInterval(250)
            genSpeedupSound.play()
            genSpeedPowerup = true
            createVHSLines(11000)
            after 10:
                window.setGenInterval(1000)
                genSpeedPowerup = false
            destroy(button)
            powerups = powerups.filter(item => item !== button);

    

def createPowerup():
    if len(powerups) > 2:
        after randomInt(8,30):
            createPowerup()
        return
    pwrupX = randomInt(-7,7) / 10
    pwrupY = randomInt(-4,4) / 10
    randomPwrup = randomInt(0,1)
    if randomPwrup == 0:
        pwrup = Button(text='click',padding=.2, color=color.black,text_color=color.white,x=pwrupX, y=pwrupY)
        pwrup.fit_to_text()
        associateClick(pwrup, "click")

    elif randomPwrup == 1:
        pwrup = Button(text='gens',padding=.2, color=color.black,text_color=color.white,x=pwrupX, y=pwrupY)
        pwrup.fit_to_text()
        associateClick(pwrup, "gens")

    after randomInt(12,38):
        createPowerup()

upgradeHolder = Entity(parent=camera.ui, color=color.clear)

nextUpgrade = Button(parent=upgradeHolder,enabled=false,text = '>', y=-.11,x=.12, padding=.27,text_size=2.6)
nextUpgrade.fit_to_text()
nextUpgrade.on_click = def():
    if len(storedUpgrades) >= 1:
        if len(activeUpgrades) > 0:
            currentUpgrade = activeUpgrades[0]
            currentUpgradeData = [currentUpgrade.text, currentUpgrade.desc, currentUpgrade.price]
            storedUpgrades.append(currentUpgradeData)
            
            removeHover(currentUpgrade)
            destroy(currentUpgrade)
            activeUpgrades.shift()
        
        nextUpgradeData = storedUpgrades[0]
        storedUpgrades.shift()
        
        addUpgrade(nextUpgradeData[0], nextUpgradeData[1], nextUpgradeData[2], true)
        
        nextUpgrade.enabled = true

generatorButton = Button(text = "Generators", x=.67, padding=.6, text_color=color.white, color=color.black, enabled = false)
generatorButton.on_click = def():
    for e in mainGameElements:
        e.enabled = false
    autoClicker.alpha = 0
    for e in generatorElements:
        e.enabled = true
    for e in powerups:
        destroy(e)

generatorButton.fit_to_text()

backgroundToggle = Button(scale=.15,enabled=false,texture='bgEnabled.svg',color=color.gray, y=.41,x=-.8)
backgroundToggle.on_click = def():
    background.enabled = not background.enabled
    localStorage.setItem('backgroundEnabled', background.enabled)
    if background.enabled:
        backgroundToggle.texture = 'bgEnabled.svg'
    else:
        backgroundToggle.texture = 'bgDisabled.svg'
    backgroundToggle.color = color.gray

mainGameElements.append(clickToEarn)
mainGameElements.append(upgradeHolder)

###### Generators ######

def loadGenerators():
    if game.generatorData["gen1"]:
        gen1.cost = game.generatorData["gen1"][1]
    gen1.text = "Generate " + formatNumber(5) + " clicks a second\nCost: " + formatNumber(gen1.cost) + " clicks"
    if game.generatorData["gen2"]:
        gen2.cost = game.generatorData["gen2"][1]
    gen2.text = "Generate " + formatNumber(18) + " clicks a second\nCost: " + formatNumber(gen2.cost) + " clicks"
    if game.generatorData["gen3"]:
        gen3.cost = game.generatorData["gen3"][1]
    gen3.text = "Generate " + formatNumber(70) + " clicks a second\nCost: " + formatNumber(gen3.cost) + " clicks"
    if game.generatorData["gen4"]:
        gen4.cost = game.generatorData["gen4"][1]
    gen4.text = "Generate " + formatNumber(260) + " clicks a second\nCost: " + formatNumber(gen4.cost) + " clicks"
    if game.generatorData["gen5"]:
        gen5.cost = game.generatorData["gen5"][1]
    gen5.text = "Generate " + formatNumber(950) + " clicks a second\nCost: " + formatNumber(gen5.cost) + " clicks"
    if game.generatorData["gen6"]:
        gen6.cost = game.generatorData["gen6"][1]
    gen6.text = "Generate " + formatNumber(3300) + " clicks a second\nCost: " + formatNumber(gen6.cost) + " clicks"

exitGenerator = Button(text = 'RETURN', position=top_left, padding=.2, enabled = false)
exitGenerator.y-=.05
exitGenerator.x+=.15
exitGenerator.fit_to_text()
exitGenerator.on_click = def():
    for e in generatorElements:
        e.enabled = false
    for e in mainGameElements:
        e.enabled = true
    
    autoClicker.alpha = 1

    if localStorage.getItem('backgroundEnabled') === 'true':
        backgroundToggle.svg = 'bgEnabled.svg'
        background.enabled = true
    else:
        backgroundToggle.svg = 'bgDisabled.svg'
        background.enabled = false

gen1 = Button(name="gen1",cost=75,genAmount=5,text_size=1,position=left,padding=.4,enabled=false,text = "Generate " + formatNumber(5) + " clicks a second\nCost: " + formatNumber(75) + " clicks")
gen1.x+=.17
gen1.y+=.28
gen1.on_click = def():
    game.buyGen(gen1,gen1.cost, gen1.genAmount, gen1.name)
gen1.fit_to_text()

gen2 = Button(name="gen2",cost=1200,genAmount=18,text_size=1,position=left,padding=.4,enabled=false,text = "Generate " + formatNumber(18) + " clicks a second\nCost: " + formatNumber(1200) + " clicks")
gen2.x+=.17
gen2.y+=.15
gen2.on_click = def():
    game.buyGen(gen2,gen2.cost, gen2.genAmount, gen2.name)
gen2.fit_to_text()

gen3 = Button(name="gen3",cost=7500,genAmount=70,text_size=1,position=left,padding=.4,enabled=false,text = "Generate " + formatNumber(70) + " clicks a second\nCost: " + formatNumber(7500) + " clicks")
gen3.x+=.17
gen3.on_click = def():
    game.buyGen(gen3,gen3.cost, gen3.genAmount, gen3.name)
gen3.fit_to_text()

gen4 = Button(name="gen4",cost=40000,genAmount=260,text_size=1,position=left,padding=.4,enabled=false,text = "Generate " + formatNumber(260) + " clicks a second\nCost: " + formatNumber(40000) + " clicks")
gen4.x+=.17
gen4.y-=.15
gen4.on_click = def():
    game.buyGen(gen4,gen4.cost, gen4.genAmount, gen4.name)
gen4.fit_to_text()

gen5 = Button(name="gen5",cost=180000,genAmount=950,text_size=1,position=left,padding=.4,enabled=false,text = "Generate " + formatNumber(950) + " clicks a second\nCost: " + formatNumber(180000) + " clicks")
gen5.x+=.17
gen5.y-=.3
gen5.on_click = def():
    game.buyGen(gen5,gen5.cost, gen5.genAmount, gen5.name)
gen5.fit_to_text()

gen6 = Button(name="gen6",cost=750000,genAmount=3300,text_size=2,padding=.4,enabled=false,text = "Generate " + formatNumber(3300) + " clicks a second\nCost: " + formatNumber(750000) + " clicks")
#gen6.x+=.8
gen6.on_click = def():
    game.buyGen(gen6,gen6.cost, gen6.genAmount, gen6.name)
gen6.fit_to_text()

generatorElements.append(scoreText)
generatorElements.append(exitGenerator)
generatorElements.append(gen1)
generatorElements.append(gen2)
generatorElements.append(gen3)
generatorElements.append(gen4)
generatorElements.append(gen5)
generatorElements.append(gen6)

######## Achievement related stuff #########

achievementFinalPosX = .64
achievementStartPosX = 1.141

activeAchievement = false
storedAchievements = []

def displayAchievement(achievementName, isCool):
    if activeAchievement:
        achievement = [achievementName, isCool]
        storedAchievements.append(achievement)
        return 

    timeout = 3
    achievementText.text = achievementName
    activeAchievement = true
    if isCool:
        achievementEarnSoundBetter.play()
        timeout = 5
    else:
        achievementEarnSound.play()

    achievementToast.animate('x', achievementFinalPosX, duration=.7)

    after timeout:
        achievementToast.animate('x', achievementStartPosX, duration=.7)
        after .75:
            activeAchievement = false

achievementToast = Entity(color=color.dark_gray,parent=camera.ui, scale=[.5,.08], x=achievementStartPosX, y=.44)
achievementToast.update = def():
    if storedAchievements.length >= 1 and not activeAchievement:
        displayAchievement(storedAchievements[0][0],storedAchievements[0][1])
        storedAchievements.shift()

achievementIcon = Entity(parent=achievementToast, texture='trophy.svg',x=-.42)
achievementEarnt = Text(parent=achievementToast,text = 'Achievement Got!',text_size=1.8,y=.3,x=-.05, text_color=color.yellow)
achievementEarnt.fit_to_text()
achievementText = Text(parent=achievementToast,text_color=color.light_gray,text='AchievementName',text_size=1.8,y=-.4,x=.08)

//displayAchievement("test achievement", true) Long version
//displayAchievement("test achievement", false) Short version

background = Entity(name="background",z=9999,enabled=false,parent=camera.ui, texture='space.jpg',scale_x=1.78, scale_y=1.01)

####### Achievement Screen #########

unlockedAchievements = 0
currentY = .44

def appendAchievement(achievementName, achievementDescription, isCool):
    newName = achievementName.split(/(?=[A-Z])/)
    name = ""
    index = 0
    for e in newName:
        if index == 0:
            e = e.charAt(0).toUpperCase() + e.slice(1);
        else:
            e = e.toLowerCase()
        
        name += " " + e
        index += 1

    e = null
    if isCool:
        e = Entity(roundness=.5,parent=achievementHolder,scale_y=.1,scale_x=.9,y=currentY,color=color.yellow)
    else:
        e = Entity(roundness=.5,parent=achievementHolder,scale_y=.1,scale_x=.9,y=currentY,color=color.light_gray)
    i = Entity(texture='trophy.svg', parent=e,x=-.44)
    
    tHolder =  Entity(color=color.clear, parent=e, scale_y=.9, scale_x=.25,x=-.27)
    t = Text(parent=tHolder,color=color.clear,text=name,text_size=1.5,scale_y=.44,x=0)
    tChild = t.el.children[0]
    tChild.style.overflowX = "hidden"
    tChild.style.overflowY = 'auto'
    tChild.style.pointerEvents = "auto"
    tChild.style.wordWrap = "break-word"
    tChild.style.whiteSpace = "normal"
    tChild.addEventListener("wheel", e => {
        e.preventDefault();

        const scrollAmount = e.deltaY / 3

        tChild.scrollBy({
            top: scrollAmount,
            behavior: "smooth"
        });
    }, { passive: false });
    requestAnimationFrame(() => {
        tChild.scrollTop = .3 * (tChild.scrollHeight - tChild.clientHeight);
    });
    #t.fit_to_text()
    
    dtHolder = Entity(color=color.clear, parent=e, scale_y=.8, scale_x=.65,x=.125)
    dt = Text(name="dt",scale_y=.57,parent=dtHolder, text=achievementDescription,text_size=1.7,y=0,x=0)
    dtChild = dt.el.children[0]
    dtChild.addEventListener("wheel", e => {
        e.preventDefault();

        const scrollAmount = e.deltaY / 3

        dtChild.scrollBy({
            top: scrollAmount,
            behavior: "smooth"
        });
    }, { passive: false });
    requestAnimationFrame(() => {
        dtChild.scrollTop = .2 * (dtChild.scrollHeight - dtChild.clientHeight);
    });
    dtChild.style.overflowX = "hidden"
    dtChild.style.overflowY = 'auto'
    dtChild.style.pointerEvents = "auto"
    dtChild.style.wordWrap = "break-word"
    dtChild.style.whiteSpace = "normal"
    achievements.append(e)
    currentY -= .13

def loadAchievementDisplay():
    let screenSize = 1
    for ([key, value] of Object.entries(game.achievements)) {

            if key == "idkJustRandomPlaceHolder":
                continue
            if value[0]:
                unlockedAchievements += 1
                appendAchievement(key, value[1], value[2])


    maxAchievements.text = unlockedAchievements + '/' + game.achievementCounter + " achievements unlocked!"

achievementHolder = Entity(enabled=false,parent=camera.ui,color=color.clear,scale_y=.85,y=-.075)
achievementHolder.el.style.overflow = "auto"
achievementHolder.el.style.pointerEvents = "auto"
achievementHolder.el.addEventListener("wheel", e => {
	e.preventDefault();

	const scrollAmount = e.deltaY / 3

	achievementHolder.el.scrollBy({
		top: scrollAmount,
		behavior: "smooth"
	});
}, { passive: false });

achievementHolderBackground = Entity(enabled=false,color=color.gray,scale_y=9999)

maxAchievements = Text(enabled=false,text='ph',y=.45,color=color.light_gray, padding=.25)
maxAchievements.fit_to_text()


returnButton = Button(enabled=false,color=color.light_gray,text='RETURN',padding=.15, x=-.75,y=.44)
returnButton.fit_to_text()
returnButton.on_click = def():
    for e in achievementElements:
        e.enabled = false

    for e in achievements:
        destroy(e)

    unlockedAchievements = 0
    currentY = .44

    for e in mainGameElements:
        e.enabled = true

    autoClicker.alpha = 1

    if localStorage.getItem('backgroundEnabled') === 'true':
        backgroundToggle.svg = 'bgEnabled.svg'
        background.enabled = true
    else:
        backgroundToggle.svg = 'bgDisabled.svg'
        background.enabled = false

achievementElements.append(returnButton)
achievementElements.append(maxAchievements)
achievementElements.append(achievementHolderBackground)
achievementElements.append(achievementHolder)

game = new GameLogic(data)

#loadScreen("game")